version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - my_network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "parse_tasks:1:3,parse_results:1:3"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      - zookeeper
    networks:
      - my_network

  akhq:
    image: tchiotludo/akhq
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    networks:
      - my_network
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            kafka:
              properties:
                bootstrap.servers: "kafka:9092"

  postgres:
    image: postgres:latest
    container_name: postgres
    restart: always
    expose:
      - 5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - my_network

  perekrestok_parser:
    build: ./perekrestok_parser
    container_name: perekrestok_parser
    depends_on:
      - kafka
      - postgres
    networks:
      - my_network

  diksi_parser:
    build: ./diksi_parser
    container_name: diksi_parser
    depends_on:
      - kafka
      - postgres

  # producer:
  #   build: ./producer
  #   container_name: producer
  #   depends_on:
  #     - kafka
  #   networks:
  #     - my_network

  # consumer:
  #   build: ./consumer
  #   container_name: consumer
  #   depends_on:
  #     - kafka
  #   networks:
  #     - my_network



networks:
  my_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local